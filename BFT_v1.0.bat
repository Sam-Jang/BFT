@echo off

:: Display the ASCII art logo
echo.
echo ____________________________
echo     ____      _____   ______
echo     /   )     /         /   
echo ---/__ /-----/__-------/----
echo   /    )    /         /     
echo _/____/____/_________/______
echo.
echo  Batch Forensic Tool v.1.0 
echo.

timeout /t 3 /nobreak >nul

:: Map Network Drive MRU Analysis
powershell -NoProfile -ExecutionPolicy Bypass -Command "Write-Host '================= Map Network Drive MRU Analysis =================' -ForegroundColor Blue;$mapDrivePath='HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Map Network Drive MRU';if (Test-Path $mapDrivePath) {Write-Host 'Scanning Map Network Drive MRU...' -ForegroundColor Cyan;$values=(Get-ItemProperty -Path $mapDrivePath|Select-Object -Property * -ExcludeProperty PS*).PSObject.Properties;foreach ($value in $values) {if ($value.Name -ne '(default)') {Write-Host 'Key Name: ' $value.Name -ForegroundColor Yellow;Write-Host 'Mapped Path: ' $value.Value -ForegroundColor Green}}} else {Write-Host 'Map Network Drive MRU path not found.' -ForegroundColor Red;}"

:: USB Usage Analysis via MountPoints2
powershell -NoProfile -ExecutionPolicy Bypass -Command "Write-Host '================= USB Usage Analysis =================' -ForegroundColor Blue; $hiveName='MyHive'; $hivePath='HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\MountPoints2'; $driveLetter='MyHive:\'; New-PSDrive -Name $hiveName -PSProvider Registry -Root 'HKCU:' | Out-Null; if(Get-PSDrive -Name $hiveName -PSProvider Registry){ Write-Host 'Registry hive mounted: ' $driveLetter -ForegroundColor Green; if(Test-Path $hivePath){ Write-Host 'Scanning USB usage records...' -ForegroundColor Cyan; $usbRecords=Get-ChildItem -Path $hivePath | ForEach-Object { @{ KeyName=$_.PSChildName; DriveLetter=if($_.PSChildName -match '^[A-Z]:$'){$_.PSChildName}else{$null}; DeviceName=if((Get-ItemProperty -Path $_.PSPath).PSObject.Properties.Match('_LabelFromReg')){(Get-ItemProperty -Path $_.PSPath)._LabelFromReg}else{$null}; RemotePath=if((Get-ItemProperty -Path $_.PSPath).PSObject.Properties.Match('RemotePath')){(Get-ItemProperty -Path $_.PSPath).RemotePath}else{$null}; SerialNumber=if($_.PSChildName -match '#'){($_.PSChildName -split '#')[2]}else{$null}; Properties=Get-ItemProperty -Path $_.PSPath }}; if($usbRecords){ foreach($record in $usbRecords){ Write-Host '-----------------------------' -ForegroundColor Yellow; Write-Host 'Key Name: ' $($record.KeyName); if($record.DriveLetter){ Write-Host 'Drive Letter: ' $($record.DriveLetter) }; if($record.DeviceName){ Write-Host 'Device Name: ' $($record.DeviceName) }; if($record.RemotePath){ Write-Host 'Remote Path: ' $($record.RemotePath) }; if($record.SerialNumber){ Write-Host 'Serial Number: ' $($record.SerialNumber) }; Write-Host 'Properties: ' $($record.Properties) } } else { Write-Host 'No USB usage records found.' -ForegroundColor Red } } else { Write-Host 'MountPoints2 path not found.' -ForegroundColor Red } Remove-PSDrive -Name $hiveName | Out-Null; Write-Host 'Registry hive removed.' -ForegroundColor Green } else { Write-Host 'Failed to mount registry hive.' -ForegroundColor Red }"

:: UserAssist Analysis
powershell -NoProfile -ExecutionPolicy Bypass -Command "Write-Host '================= UserAssist Analysis =================' -ForegroundColor Blue;$userAssistBase='HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\UserAssist';function Decode-Rot13 {param([string]$InputString);$result='';foreach ($char in $InputString.ToCharArray()) {if ($char -match '[A-Za-z]') {$base=if ($char -cmatch '[A-Z]') {[int][char]'A'} else {[int][char]'a'};$result+=[char]((([int][char]$char-$base+13)%%26)+$base);} else {$result+=$char}};return $result};if (Test-Path $userAssistBase) {Write-Host 'Scanning UserAssist keys...' -ForegroundColor Cyan;$userAssistKeys=Get-ChildItem -Path $userAssistBase;foreach ($guidKey in $userAssistKeys) {if (Test-Path ($guidKey.PSPath + '\Count')) {Write-Host 'Processing Count key in: ' $guidKey.PSChildName -ForegroundColor Yellow;$countKeyPath=$guidKey.PSPath + '\Count';$countValues=Get-ItemProperty -Path $countKeyPath|Select-Object -Property * -ExcludeProperty PS*;foreach ($value in $countValues.PSObject.Properties) {if ($value.Name -ne 'MRUList') {$decodedName=Decode-Rot13 -InputString $value.Name;$rawData=$value.Value;if ($rawData -is [byte[]] -and $rawData.Length -ge 68) {$runCount=[BitConverter]::ToInt32($rawData, 4);$lastRunTimeRaw=[BitConverter]::ToInt64($rawData, 60);if ($lastRunTimeRaw -eq 0) {$lastRunTime='Not Available'} else {$lastRunTime=[datetime]::FromFileTimeUtc($lastRunTimeRaw)};Write-Host 'Decoded Name: ' $decodedName -ForegroundColor Green;Write-Host 'Run Count: ' $runCount -ForegroundColor Cyan;Write-Host 'Last Run Time: ' $lastRunTime -ForegroundColor Magenta;} else {Write-Host 'Decoded Name: ' $decodedName -ForegroundColor Green;Write-Host 'Invalid or Missing Data for: ' $value.Name -ForegroundColor Red;}}}}}} else {Write-Host 'UserAssist base path not found.' -ForegroundColor Red;}"

:: Recent Documents Analysis
powershell -NoProfile -ExecutionPolicy Bypass -Command "Write-Host '================= Recent Documents Analysis =================' -ForegroundColor Blue;$hiveName='MyHive';$recentDocsPath='HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\RecentDocs';$driveLetter='MyHive:\';$fileExtensions=@('\.txt$','\.pdf$','\.hwp$','\.hwpx$','\.doc$','\.docx$','\.ppt$','\.pptx$','\.xls$','\.xlsx$','\.tif$','\.eml$','\.msg$','\.zip$','\.alz$');New-PSDrive -Name $hiveName -PSProvider Registry -Root 'HKCU:';if((Get-PSDrive -Name $hiveName -PSProvider Registry)){Write-Host 'Registry hive mounted: $driveLetter' -ForegroundColor Green;if(Test-Path $recentDocsPath){Write-Host 'Scanning recent documents...' -ForegroundColor Cyan;$recentKeys=Get-ChildItem -Path $recentDocsPath;foreach($key in $recentKeys){if($key.PSChildName -match ($fileExtensions -join '|')){Write-Host '-----------------------------' -ForegroundColor Yellow;Write-Host 'File Type/Extension: ' $key.PSChildName;$values=(Get-ItemProperty -Path $key.PSPath|Select-Object -Property * -ExcludeProperty PS*).PSObject.Properties;foreach($value in $values){if($value.Name -ne 'MRUList' -and $value.Value -is [byte[]]){$decoded=[System.Text.Encoding]::Unicode.GetString($value.Value).TrimEnd([char]0);$cleaned=$decoded.Split([char]0)[0];Write-Host 'Path: ' $cleaned}}}}}else{Write-Host 'RecentDocs path not found.' -ForegroundColor Red};Remove-PSDrive -Name $hiveName;Write-Host 'Registry hive removed.' -ForegroundColor Green;}else{Write-Host 'Failed to mount registry hive.' -ForegroundColor Red;}"

:: Missing LNK Targets Analysis
powershell -NoProfile -ExecutionPolicy Bypass -Command "Write-Host '================= Missing LNK Targets Analysis =================' -ForegroundColor Blue; $foldersToScan=@([System.Environment]::GetFolderPath('ApplicationData'),[System.Environment]::GetFolderPath('Recent')); function Check-LnkFile { param([string]$lnkFilePath); try { $shell=New-Object -ComObject WScript.Shell; $shortcut=$shell.CreateShortcut($lnkFilePath); if (!(Test-Path $shortcut.TargetPath)) { Write-Host 'Missing Target: ' $shortcut.TargetPath -ForegroundColor Yellow; Write-Host 'LNK File Location: ' $lnkFilePath -ForegroundColor Cyan; Write-Host 'Last Modified Time: ' (Get-Item $lnkFilePath).LastWriteTime -ForegroundColor Green; Write-Host '-----------------------------' } } catch { Write-Host 'Error processing LNK file: ' $lnkFilePath -ForegroundColor Red } }; foreach ($folder in $foldersToScan) { try { $lnkFiles=Get-ChildItem -Path $folder -Recurse -Filter '*.lnk' -ErrorAction SilentlyContinue; if ($lnkFiles -ne $null) { foreach ($lnk in $lnkFiles) { Check-LnkFile -lnkFilePath $lnk.FullName } } } catch { Write-Host 'Error scanning folder: ' $folder -ForegroundColor Red } }; Write-Host 'Scan Completed.' -ForegroundColor Cyan;"

:: Jump List Analysis - AutomaticDestinations
powershell -NoProfile -ExecutionPolicy Bypass -Command "Write-Host '================= Jump List Analysis - AutomaticDestinations =================' -ForegroundColor Blue; $jumpListPath=[System.Environment]::GetFolderPath('ApplicationData') + '\Microsoft\Windows\Recent\AutomaticDestinations'; function Analyze-JumpListFile { param([string]$jumpFilePath); try { $fileContent=Get-Content -Path $jumpFilePath -Raw -Encoding Byte; $regex=[System.Text.RegularExpressions.Regex]::new('([a-zA-Z]:\\[^\x00]+)', 'IgnoreCase'); $matches=$regex.Matches([System.Text.Encoding]::Unicode.GetString($fileContent)); $modTime=(Get-Item $jumpFilePath).LastWriteTime; if ($matches.Count -gt 0) { Write-Host '========================'; Write-Host 'Jumplist file: ' -NoNewline; Write-Host $jumpFilePath -ForegroundColor Cyan; Write-Host 'Jumplist file Time: ' -NoNewline; Write-Host $modTime -ForegroundColor Cyan; foreach ($match in $matches) { $filePath=$match.Value; if (!(Test-Path $filePath)) { Write-Host 'Missing File: ' -NoNewline; Write-Host $filePath -ForegroundColor White } } Write-Host '========================'; } } catch { Write-Host 'Error processing Jump List file: ' -NoNewline; Write-Host $jumpFilePath -ForegroundColor Red; Write-Host $_.Exception.Message -ForegroundColor Red } }; try { $jumpFiles=Get-ChildItem -Path $jumpListPath -Recurse -Filter '*.automaticDestinations-ms' -ErrorAction SilentlyContinue; if ($jumpFiles -ne $null) { foreach ($jumpFile in $jumpFiles) { Analyze-JumpListFile -jumpFilePath $jumpFile.FullName } } else { Write-Host 'No Jump List files found in: ' -NoNewline; Write-Host $jumpListPath -ForegroundColor Red } } catch { Write-Host 'Error scanning folder: ' -NoNewline; Write-Host $jumpListPath -ForegroundColor Red }"

:: Jump List Analysis - CustomDestinations
powershell -NoProfile -ExecutionPolicy Bypass -Command "Write-Host '================= Jump List Analysis - CustomDestinations =================' -ForegroundColor Blue; $jumpListPath=[System.Environment]::GetFolderPath('ApplicationData') + '\Microsoft\Windows\Recent\CustomDestinations'; function Analyze-JumpListFile { param([string]$jumpFilePath); try { $fileContent=Get-Content -Path $jumpFilePath -Raw -Encoding Byte; $regex=[System.Text.RegularExpressions.Regex]::new('([a-zA-Z]:\\[^\x00]+)', 'IgnoreCase'); $matches=$regex.Matches([System.Text.Encoding]::Unicode.GetString($fileContent)); $modTime=(Get-Item $jumpFilePath).LastWriteTime; if ($matches.Count -gt 0) { Write-Host '========================'; Write-Host 'Jumplist file: ' -NoNewline; Write-Host $jumpFilePath -ForegroundColor Cyan; Write-Host 'Jumplist file Time: ' -NoNewline; Write-Host $modTime -ForegroundColor Cyan; foreach ($match in $matches) { $filePath=$match.Value; if (!(Test-Path $filePath)) { Write-Host 'Missing File: ' -NoNewline; Write-Host $filePath -ForegroundColor White } } Write-Host '========================'; } } catch { Write-Host 'Error processing Jump List file: ' -NoNewline; Write-Host $jumpFilePath -ForegroundColor Red; Write-Host $_.Exception.Message -ForegroundColor Red } }; try { $jumpFiles=Get-ChildItem -Path $jumpListPath -Recurse -Filter '*.customDestinations-ms' -ErrorAction SilentlyContinue; if ($jumpFiles -ne $null) { foreach ($jumpFile in $jumpFiles) { Analyze-JumpListFile -jumpFilePath $jumpFile.FullName } } else { Write-Host 'No Jump List files found in: ' -NoNewline; Write-Host $jumpListPath -ForegroundColor Red } } catch { Write-Host 'Error scanning folder: ' -NoNewline; Write-Host $jumpListPath -ForegroundColor Red }"

:: Explorer Search Terms bia WordWheelQuery
powershell -NoProfile -ExecutionPolicy Bypass -Command "$wordWheelPath='HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\WordWheelQuery';if (Test-Path $wordWheelPath) {Write-Host 'Scanning WordWheelQuery...' -ForegroundColor Cyan;$searchKeys=Get-ItemProperty -Path $wordWheelPath|Select-Object -Property * -ExcludeProperty PS*;foreach ($key in $searchKeys.PSObject.Properties) {if ($key.Name -ne '(default)') {if ($key.Value -is [byte[]]) {$decodedValue=[System.Text.Encoding]::Unicode.GetString($key.Value).TrimEnd([char]0);Write-Host '-----------------------------' -ForegroundColor Yellow;Write-Host 'Search Term: ' $decodedValue -ForegroundColor Green;} else {Write-Host '-----------------------------' -ForegroundColor Yellow;Write-Host 'Search Term: ' $key.Value -ForegroundColor Green;}}}} else {Write-Host 'WordWheelQuery key not found.' -ForegroundColor Red;}"

echo.
echo Script execution completed.
timeout /t 3 /nobreak >nul
