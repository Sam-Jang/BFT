@echo off

:: Display the ASCII art logo
echo.
echo ____________________________
echo     ____      _____   ______
echo     /   )     /    '    /   
echo ---/__ /-----/__-------/----
echo   /    )    /         /     
echo _/____/____/_________/______
echo.
echo ========== BFT v1.0 ==========
echo.

timeout /t 3 /nobreak >nul


:: Map Network Drive MRU Analysis
powershell -NoProfile -ExecutionPolicy Bypass -Command "Write-Host '================= Map Network Drive MRU Analysis =================' -ForegroundColor Blue;$mapDrivePath='HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Map Network Drive MRU';if (Test-Path $mapDrivePath) {Write-Host 'Scanning Map Network Drive MRU...' -ForegroundColor Cyan;$values=(Get-ItemProperty -Path $mapDrivePath|Select-Object -Property * -ExcludeProperty PS*).PSObject.Properties;foreach ($value in $values) {if ($value.Name -ne '(default)') {Write-Host 'Key Name: ' $value.Name -ForegroundColor Yellow;Write-Host 'Mapped Path: ' $value.Value -ForegroundColor Green}}} else {Write-Host 'Map Network Drive MRU path not found.' -ForegroundColor Red;}"

:: USB Usage Analysis via MountPoints2
powershell -NoProfile -ExecutionPolicy Bypass -Command "Write-Host '================= USB Usage Analysis =================' -ForegroundColor Blue;$hiveName='MyHive';$hivePath='HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\MountPoints2';$driveLetter='MyHive:\';New-PSDrive -Name $hiveName -PSProvider Registry -Root 'HKCU:';if((Get-PSDrive -Name $hiveName -PSProvider Registry)){Write-Host 'Registry hive mounted: '$driveLetter -ForegroundColor Green;if(Test-Path $hivePath){Write-Host 'Scanning USB usage records...' -ForegroundColor Cyan;$usbRecords=Get-ChildItem -Path $hivePath|ForEach-Object{@{KeyName=$_.PSChildName;Properties=(Get-ItemProperty -Path $_.PSPath);DriveLetter=if($_.PSChildName -match '^[A-Z]:$'){$_.PSChildName}else{$null};DeviceName=if($_.Properties.'_LabelFromReg'){$_.Properties.'_LabelFromReg'}else{$null};RemotePath=if($_.Properties.RemotePath){$_.Properties.RemotePath}else{$null};SerialNumber=if($_.PSChildName -match '#'){($_.PSChildName -split '#')[2]}else{$null}}};if($usbRecords){foreach($record in $usbRecords){Write-Host '-----------------------------' -ForegroundColor Yellow;Write-Host 'Key Name: '$($record.KeyName);Write-Host 'Drive Letter: '$($record.DriveLetter);Write-Host 'Device Name: '$($record.DeviceName);Write-Host 'Remote Path: '$($record.RemotePath);Write-Host 'Serial Number: '$($record.SerialNumber);Write-Host 'Properties: '$($record.Properties)}}else{Write-Host 'No USB usage records found.' -ForegroundColor Red}}else{Write-Host 'MountPoints2 path not found.' -ForegroundColor Red};Remove-PSDrive -Name $hiveName;Write-Host 'Registry hive removed.' -ForegroundColor Green}else{Write-Host 'Failed to mount registry hive.' -ForegroundColor Red;}"

:: Recent Documents Analysis
powershell -NoProfile -ExecutionPolicy Bypass -Command "Write-Host '================= Recent Documents Analysis =================' -ForegroundColor Blue;$hiveName='MyHive';$recentDocsPath='HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\RecentDocs';$driveLetter='MyHive:\';$fileExtensions=@('\.txt$','\.pdf$','\.hwp$','\.hwpx$','\.doc$','\.docx$','\.ppt$','\.pptx$','\.xls$','\.xlsx$','\.tif$','\.eml$','\.msg$','\.zip$','\.alz$');New-PSDrive -Name $hiveName -PSProvider Registry -Root 'HKCU:';if((Get-PSDrive -Name $hiveName -PSProvider Registry)){Write-Host 'Registry hive mounted: $driveLetter' -ForegroundColor Green;if(Test-Path $recentDocsPath){Write-Host 'Scanning recent documents...' -ForegroundColor Cyan;$recentKeys=Get-ChildItem -Path $recentDocsPath;foreach($key in $recentKeys){if($key.PSChildName -match ($fileExtensions -join '|')){Write-Host '-----------------------------' -ForegroundColor Yellow;Write-Host 'File Type/Extension: ' $key.PSChildName;$values=(Get-ItemProperty -Path $key.PSPath|Select-Object -Property * -ExcludeProperty PS*).PSObject.Properties;foreach($value in $values){if($value.Name -ne 'MRUList' -and $value.Value -is [byte[]]){$decoded=[System.Text.Encoding]::Unicode.GetString($value.Value).TrimEnd([char]0);$cleaned=$decoded.Split([char]0)[0];Write-Host 'Path: ' $cleaned}}}}}else{Write-Host 'RecentDocs path not found.' -ForegroundColor Red};Remove-PSDrive -Name $hiveName;Write-Host 'Registry hive removed.' -ForegroundColor Green;}else{Write-Host 'Failed to mount registry hive.' -ForegroundColor Red;}"

:: UserAssist Analysis
powershell -NoProfile -ExecutionPolicy Bypass -Command "Write-Host '================= UserAssist Analysis =================' -ForegroundColor Blue;$userAssistBase='HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\UserAssist';function Decode-Rot13 {param([string]$InputString);$result='';foreach ($char in $InputString.ToCharArray()) {if ($char -match '[A-Za-z]') {$base=if ($char -cmatch '[A-Z]') {[int][char]'A'} else {[int][char]'a'};$result+=[char]((([int][char]$char-$base+13)%%26)+$base);} else {$result+=$char}};return $result};if (Test-Path $userAssistBase) {Write-Host 'Scanning UserAssist keys...' -ForegroundColor Cyan;$userAssistKeys=Get-ChildItem -Path $userAssistBase;foreach ($guidKey in $userAssistKeys) {if (Test-Path ($guidKey.PSPath + '\Count')) {Write-Host 'Processing Count key in: ' $guidKey.PSChildName -ForegroundColor Yellow;$countKeyPath=$guidKey.PSPath + '\Count';$countValues=Get-ItemProperty -Path $countKeyPath|Select-Object -Property * -ExcludeProperty PS*;foreach ($value in $countValues.PSObject.Properties) {if ($value.Name -ne 'MRUList') {$decodedName=Decode-Rot13 -InputString $value.Name;$rawData=$value.Value;if ($rawData -is [byte[]] -and $rawData.Length -ge 68) {$runCount=[BitConverter]::ToInt32($rawData, 4);$lastRunTimeRaw=[BitConverter]::ToInt64($rawData, 60);if ($lastRunTimeRaw -eq 0) {$lastRunTime='Not Available'} else {$lastRunTime=[datetime]::FromFileTimeUtc($lastRunTimeRaw)};Write-Host 'Decoded Name: ' $decodedName -ForegroundColor Green;Write-Host 'Run Count: ' $runCount -ForegroundColor Cyan;Write-Host 'Last Run Time: ' $lastRunTime -ForegroundColor Magenta;} else {Write-Host 'Decoded Name: ' $decodedName -ForegroundColor Green;Write-Host 'Invalid or Missing Data for: ' $value.Name -ForegroundColor Red;}}}}}} else {Write-Host 'UserAssist base path not found.' -ForegroundColor Red;}"

:: Missing LNK Targets Analysis
powershell -NoProfile -ExecutionPolicy Bypass -Command "Write-Host '================= Missing LNK Targets Analysis =================' -ForegroundColor Blue;$foldersToScan=@([System.Environment]::GetFolderPath('ApplicationData'),[System.Environment]::GetFolderPath('Recent'));function Check-LnkFile {param([string]$lnkFilePath);try {$shell=New-Object -ComObject WScript.Shell;$shortcut=$shell.CreateShortcut($lnkFilePath);if (!(Test-Path $shortcut.TargetPath)){Write-Host '';Write-Host 'Missing Target: ' $lnkFilePath;Write-Host 'Last Modified Time: ' (Get-Item $lnkFilePath).LastWriteTime;Write-Host ''}}catch{}};foreach ($folder in $foldersToScan){try {$lnkFiles=Get-ChildItem -Path $folder -Recurse -Filter '*.lnk' -ErrorAction SilentlyContinue;if ($lnkFiles -ne $null){foreach ($lnk in $lnkFiles){Check-LnkFile -lnkFilePath $lnk.FullName}}}catch{}};Write-Host 'Scan Completed.' -ForegroundColor Cyan;"

:: Explorer Search Terms bia WordWheelQuery
powershell -NoProfile -ExecutionPolicy Bypass -Command "$wordWheelPath='HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\WordWheelQuery';if (Test-Path $wordWheelPath) {Write-Host 'Scanning WordWheelQuery...' -ForegroundColor Cyan;$searchKeys=Get-ItemProperty -Path $wordWheelPath|Select-Object -Property * -ExcludeProperty PS*;foreach ($key in $searchKeys.PSObject.Properties) {if ($key.Name -ne '(default)') {if ($key.Value -is [byte[]]) {$decodedValue=[System.Text.Encoding]::Unicode.GetString($key.Value).TrimEnd([char]0);Write-Host '-----------------------------' -ForegroundColor Yellow;Write-Host 'Search Term: ' $decodedValue -ForegroundColor Green;} else {Write-Host '-----------------------------' -ForegroundColor Yellow;Write-Host 'Search Term: ' $key.Value -ForegroundColor Green;}}}} else {Write-Host 'WordWheelQuery key not found.' -ForegroundColor Red;}"

:: Most Recent Used folders bia BagMRU
powershell -NoProfile -ExecutionPolicy Bypass -Command "$bagMRUPath='HKCU:\Software\Microsoft\Windows\Shell\BagMRU';function Parse-BagMRU {param([string]$keyPath);$key=[Microsoft.Win32.Registry]::CurrentUser.OpenSubKey($keyPath);if ($key) {foreach ($value in $key.GetValueNames()) {if ($value -match '^\d+$') {$data=$key.GetValue($value);$decodedPath=[System.Text.Encoding]::Unicode.GetString($data).TrimEnd([char]0);Write-Host 'Folder: ' $decodedPath -ForegroundColor Green;}}foreach ($subKey in $key.GetSubKeyNames()) {Parse-BagMRU -keyPath ($keyPath+'\\'+$subKey);}}};if (Test-Path $bagMRUPath) {Write-Host 'Scanning BagMRU...' -ForegroundColor Cyan;Parse-BagMRU -keyPath 'Software\\Microsoft\\Windows\\Shell\\BagMRU';} else {Write-Host 'BagMRU key not found.' -ForegroundColor Red;}"


echo.
echo Script execution completed.
timeout /t 3 /nobreak >nul
